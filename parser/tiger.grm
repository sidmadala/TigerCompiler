structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp | program of A.exp

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc EQ NEQ LT GT LE GE
%left PLUS MINUS
%left TIMES DIV
%left UMINUS
%right EXP

%%

program : exp				                                   (exp)

(* general exp *)
exp:     NIL		                                                 (A.NilExp)
       | STRING                                                       ()
       (* conditional *)
       | IF exp THEN exp ELSE exp                                     () 
       | IF exp THEN exp                                              ()
       (* math *)
       | arithexp                                                     () 
       (* loops *)
       | WHILE exp DO exp                                             ()
       | FOR ID ASSIGN exp TO exp DO exp                              ()
       | BREAK                                                        ()
       (* let decs TODO: declist with all types of declarations + mutually recursive list stuff*)
       | LET declist IN seq_exp END                                   ()
       (* functions *)
       | fundec                                                       ()
       (* misc parentheses *)
       | LPAREN exp RPAREN			                            ()
       | LPAREN RPAREN                                                ()
       | LPAREN exp SEMICOLON exp_seq RPAREN                          ()
       (* lvalue exp and assignment *)
       | lvalue                                                       ()
       | l_value ASSIGN exp                                           ()

lvalue: ID                                                            ()
       | lvalue DOT ID                                                ()
       | lvalue LBRACK exp RBRACK                                     ()

(* sequential expressions *)
seq_exp : exp                                                         ()
       | seq_exp SEMICOLON exp                                        ()
	

(* fun *)
fundecs : fundec                                                      ()
        | fundec fundecs                                              ()

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp                    ()
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp           ()

vardec : VAR ID ASSIGN exp                                            ()
       | VAR ID COLON ID ASSIGN exp                                   ()

tydecs : tydec                                                        ()
       | tydec tydecs                                                 ()

tydec : TYPE ID EQ ty                                                 ()

ty : ID                                                               ()
   | LBRACE tyfields RBRACE                                           ()
   | ARRAY OF ID                                                      ()

tyfields :                                                            ()
         | ID COLON ID                                                ()
         | ID COLON ID COMMA tyfields                                 ()

opexp : MINUS exp %prec UMINUS      (A.OpExp {left = exp1, oper = A.oper MinusOp, right = exp2, pos = exp1left})
         | exp PLUS exp             (A.OpExp {left = exp1, oper = A.oper PlusOp, right = exp2, pos = exp1left})             
         | exp MINUS exp            (A.OpExp {left = exp1, oper = A.oper MinusOp, right = exp2, pos = exp1left})            
         | exp TIMES exp            (A.OpExp {left = exp1, oper = A.oper TimesOp, right = exp2, pos = exp1left})           
         | exp DIVIDE exp           (A.OpExp {left = exp1, oper = A.oper DivideOp, right = exp2, pos = exp1left})          
         | exp EQ exp               (A.OpExp {left = exp1, oper = A.oper EqOp, right = exp2, pos = exp1left})         
         | exp NEQ exp              (A.OpExp {left = exp1, oper = A.oper NeqOp, right = exp2, pos = exp1left})        
         | exp LT exp               (A.OpExp {left = exp1, oper = A.oper LtOp, right = exp2, pos = exp1left})       
         | exp LE exp               (A.OpExp {left = exp1, oper = A.oper LeOp, right = exp2, pos = exp1left})              
         | exp GT exp               (A.OpExp {left = exp1, oper = A.oper GtOp, right = exp2, pos = exp1left})              
         | exp GE exp               (A.OpExp {left = exp1, oper = A.oper GeOp, right = exp2, pos = exp1left})    
         | exp AND exp              ()   
         | exp OR exp               ()           
         | INT                      (A.IntExp INT)

(* record initializing parameters*)
record_param : ID EQ exp				                     ()
       | ID EQ exp COMMA record_param		                     ()
